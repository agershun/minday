// Generated by CoffeeScript 1.3.3
var clipboard, deleteIdeas;

clipboard = {};

/*
Idea::addIdea = (cia, start,focus,refresh=true,child=false) ->
	unless cia? then cia = {}
	ia = add ""	# Копируем основные параметры
	ia.plain = cia.plain if cia.plain?
	ia.style = cia.style if cia.style?
	ia.class = cia.class if cia.class?
	unless child
		ia.forma = cia.forma if cia.forma?
		ia.scheme = cia.scheme if cia.scheme?
		ia.place = cia.place if cia.place?
		ia.list = cia.list if cia.list?
		ia.kind = cia.kind if cia.kind?
	else
		ia.kind = cia.childkind()

#	ia.panel = cia.panel if cia.panel?
#	ia.panelplace = cia.panelplace if cia.panelplace?
#	ia.span = cia.span if cia.span?
	ia.pa = @
#	ia.sd = side
	ia.ix = start

	if start <= @length-1
		for i in [@length..start+1] by -1
			@[i] = @[i-1]
			@[i].ix = i

	@[start] = ia
	@length++

#	@afterinsert()

	if refresh
		fia = @[focus]
		fia.upperFrame().fhtml(fia)
	ia
*/


Idea.prototype.normalizeIdea = function() {
  var a, aa, i, j, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
  if ((this[BEFORE] != null) && this[BEFORE].length === 0) {
    delete this[BEFORE];
  }
  if (this[BEFORE] != null) {
    _ref = this[BEFORE];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      a = _ref[i];
      a.pa = this;
      a.sd = BEFORE;
      a.ix = i;
    }
  }
  if ((this[AFTER] != null) && this[AFTER].length === 0) {
    delete this[AFTER];
  }
  if (this[AFTER] != null) {
    _ref1 = this[AFTER];
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      a = _ref1[i];
      a.pa = this;
      a.sd = AFTER;
      a.ix = i;
    }
  }
  if ((this[OUTSIDE] != null) && this[OUTSIDE].length === 0) {
    delete this[OUTSIDE];
  }
  if (this[OUTSIDE] != null) {
    _ref2 = this[OUTSIDE];
    for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
      a = _ref2[i];
      a.pa = this;
      a.sd = OUTSIDE;
      a.ix = i;
    }
  }
  if (this.length > 0) {
    _ref3 = this.data;
    for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
      aa = _ref3[i];
      for (j = _m = 0, _len4 = aa.length; _m < _len4; j = ++_m) {
        a = aa[j];
        a.pa = this;
        a.sd = i;
        a.ix = j;
      }
    }
  }
  return this;
};

deleteIdeas = function(refresh, cut) {
  if (refresh == null) {
    refresh = true;
  }
  if (cut == null) {
    cut = false;
  }
  return sidea.deleteIdea(refresh, cut);
};

Idea.prototype.clearIdea = function(refresh, cut) {
  var a, al, bl, dl, i, _i, _j, _k, _l, _len, _ref;
  if (refresh == null) {
    refresh = true;
  }
  if (cut == null) {
    cut = false;
  }
  if (!cut) {
    if ((this[BEFORE] != null) && this[BEFORE].length > 0) {
      bl = this[BEFORE].length - 1;
      for (i = _i = bl; _i >= 0; i = _i += -1) {
        this[BEFORE][i].deleteIdea(false);
      }
    }
    if ((this[AFTER] != null) && this[AFTER].length > 0) {
      al = this[AFTER].length - 1;
      for (i = _j = al; _j >= 0; i = _j += -1) {
        this[AFTER][i].deleteIdea(false);
      }
    }
    if (this.length > 0) {
      _ref = this.data;
      for (_k = 0, _len = _ref.length; _k < _len; _k++) {
        a = _ref[_k];
        dl = a.length - 1;
        for (i = _l = dl; _l >= 0; i = _l += -1) {
          a[i].deleteIdea(false);
        }
      }
    }
    this.txt = "";
  }
  return this;
};

Idea.prototype.deleteRow = function() {
  var ix, pa, ret, sd;
  if (this.sd >= 0) {
    sd = this.sd;
    pa = this.pa;
    ix = this.ix;
    pa.splice(sd, 1);
    pa.normalizeIdea();
    if (pa.length === 0) {
      ret = pa;
    } else {
      if (sd > pa.length - 1) {
        sd = pa.length - 1;
      }
      if (ix > pa[sd].length - 1) {
        ix = pa[sd].length - 1;
      }
      ret = pa[sd][ix];
    }
    fidea.fhtml(ret);
  }
  return this;
};

Idea.prototype.deleteColumn = function() {
  var ix, j, pa, ret, sd, _i, _ref;
  if (this.sd >= 0) {
    sd = this.sd;
    pa = this.pa;
    ix = this.ix;
    for (j = _i = 0, _ref = this.pa.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      pa[j].splice(ix, 1);
    }
    pa.normalizeIdea();
    if (pa.length === 0) {
      ret = pa;
    } else {
      if (sd > pa.length - 1) {
        sd = pa.length - 1;
      }
      if (ix > pa[sd].length - 1) {
        ix = pa[sd].length - 1;
      }
      ret = pa[sd][ix];
    }
    fidea.fhtml(ret);
  }
  return this;
};

Idea.prototype.deleteIdea = function(refresh, cut) {
  var ix, pa, ret, sd;
  if (refresh == null) {
    refresh = true;
  }
  if (cut == null) {
    cut = false;
  }
  if (this.txt !== null && $.trim(this.txt) !== "") {
    if (this.length > 0 || (this[OUTSIDE] != null) && (this[OUTSIDE].length > 0)) {
      this.txt = null;
      ret = this;
    }
  } else {
    this.clearIdea(refresh, cut);
    ix = this.ix;
    sd = this.sd;
    pa = this.pa;
    ret = pa;
    if (this.pa != null) {
      if ((sd === BEFORE) || (sd === AFTER)) {
        pa[sd].splice(ix, 1);
        pa.normalizeIdea();
        if ((!(pa[sd] != null)) || (pa[sd].length === 0)) {
          delete pa[sd];
          ret = pa;
        } else {
          if (ix > pa[sd].length - 1) {
            ix = pa[sd].length - 1;
          }
          ret = pa[sd][ix];
        }
      } else if (sd >= 0) {
        pa[sd].splice(ix, 1);
        if (pa[sd].length === 0) {
          pa.splice(sd, 1);
        }
        pa.normalizeIdea();
        if (pa.length === 0) {
          ret = pa;
        } else {
          if (sd > pa.length - 1) {
            sd = pa.length - 1;
          }
          if (ix > pa[sd].length - 1) {
            ix = pa[sd].length - 1;
          }
          ret = pa[sd][ix];
        }
      }
    }
  }
  if (refresh) {
    fidea.fhtml(ret);
  }
  return ret;
};

Idea.prototype.cutIdea = function() {
  clipboard.idea = this;
  clipboard.needClone = false;
  return this.deleteIdea(true, true);
};

Idea.prototype.copyIdea = function() {
  clipboard.idea = this;
  return clipboard.needClone = true;
};

Idea.prototype.pasteIdea = function(cia, start, focus, refresh) {
  var fia, i, ia, _i, _ref, _ref1;
  if (refresh == null) {
    refresh = true;
  }
  if (cia == null) {
    cia = {};
  }
  ia = (clipboard.needClone != null) && clipboard.needClone ? clipboard.idea.clone : clipboard.idea;
  ia.pa = this;
  ia.ix = start;
  if (cia.plain != null) {
    ia.plain = cia.plain;
  }
  if (cia.list != null) {
    ia.list = cia.list;
  }
  if (start <= this.length - 1) {
    for (i = _i = _ref = this.length, _ref1 = start + 1; _i >= _ref1; i = _i += -1) {
      this[i] = this[i - 1];
      this[i].ix = i;
    }
  }
  this[start] = ia;
  this.length++;
  if (refresh) {
    fia = this[focus];
    fia.upperFrame().fhtml(fia);
  }
  return this;
};

Idea.prototype.duplicateIdea = function() {
  var fia, focus, i, ia, start, _i, _ref, _ref1;
  if (this !== fidea) {
    start = this.ix + 1;
    focus = this.ix + 1;
    ia = this.clone;
    ia.pa = this.pa;
    ia.ix = start;
    if (this.plain != null) {
      ia.plain = this.plain;
    }
    if (this.list != null) {
      ia.list = this.list;
    }
    if (start <= this.pa.length - 1) {
      for (i = _i = _ref = this.pa.length, _ref1 = start + 1; _i >= _ref1; i = _i += -1) {
        this.pa[i] = this.pa[i - 1];
        this.pa[i].ix = i;
      }
    }
    this.pa[start] = ia;
    this.pa.length++;
    fia = this.pa[focus];
    fia.upperFrame().fhtml(fia);
  }
  return this;
};
