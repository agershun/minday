// Generated by CoffeeScript 1.3.3
var bocol;

keyp[BLUEOCEAN] = {};

keyp[OCEAN] = {};

keyp[CHAR] = {};

canvastype[BLUEOCEAN] = function() {
  return PASSIVE;
};

childkind[BLUEOCEAN] = function() {
  return OCEAN;
};

childkind[OCEAN] = function() {
  return IDEA;
};

childkind[CHARS] = function() {
  return CHAR;
};

childkind[CHAR] = function() {
  return IDEA;
};

Idea.prototype.kindBlueOcean = function() {
  var i, ia, _i, _j, _len, _len1, _ref, _ref1, _results;
  this.kind = BLUEOCEAN;
  _ref = this.data;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    ia = _ref[i];
    ia.pa = this;
    ia.ix = i;
    ia.kind = OCEAN;
  }
  this.char.pa = this;
  this.char.ix = "char";
  this.char.kind = CHARS;
  _ref1 = this.char.data;
  _results = [];
  for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
    ia = _ref1[i];
    ia.pa = this;
    ia.ix = i;
    _results.push(ia.kind = CHAR);
  }
  return _results;
};

bocol = ["Red", "Green", "Blue", "Yellow", "Brown"];

draw[BLUEOCEAN] = function(level) {
  var i, ia, s, _i, _j, _len, _ref, _ref1;
  s = this.startIdeaTxt(level);
  if (this.notFrame(level)) {
    s += "<table id='tbl" + this.id + "' class='normaltable'><thead><th>";
    if (this.char.length > 0) {
      _ref = this.char.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ia = _ref[_i];
        if (ia.kind === CHAR) {
          s += "<th id='tbl" + ia.id + "'>";
          s += ia.draw(level + 1);
        }
      }
    }
    s += "<tbody>";
    if (this.length > 0) {
      s += "<tr>";
      s += "<th id='tbl" + this[0].id + "' style='color:" + bocol[0] + ";'>" + this[0].draw(level + 1);
      s += "<td id='cnv" + this.id + "' rowspan=" + this.length + " colspan=" + this.char.length + " >";
    }
    if (this.length > 1) {
      for (i = _j = 1, _ref1 = this.length - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        ia = this[i];
        if (ia.kind === OCEAN) {
          s += "<tr><th id='tbl" + ia.id + "' style='color:" + bocol[i] + ";'>";
          s += ia.draw(level + 1);
        }
      }
    }
  }
  return s += this.endIdeaTxt(level);
};

cvv[BLUEOCEAN] = function() {
  var $cvv, ia, _i, _len, _ref, _results;
  v[this.id] = {};
  v[this.id].ww = $("#tbl" + this.id).outerWidth(true);
  v[this.id].hh = $("#tbl" + this.id).outerHeight(true);
  v[this.id].sw = $("#cnv" + this.id).position().left;
  v[this.id].sh = $("#cnv" + this.id).position().top;
  v[this.id].w = $("#cnv" + this.id).outerWidth(true);
  v[this.id].h = $("#cnv" + this.id).outerHeight(true);
  $cvv = $("#cvv" + this.id);
  $cvv.attr("height", v[this.id].hh);
  $cvv.attr("width", v[this.id].ww);
  v[this.id].ctx = $cvv[0].getContext("2d");
  _ref = this.data;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    _results.push(ia.paintOcean(v[this.id].ctx));
  }
  return _results;
};

Idea.prototype.paintOcean = function(ctx) {
  var bocolor, ca, px, py, r, x, y, _i, _len, _ref, _results;
  bocolor = bocol[this.ix];
  px = $("#tbl" + this.id).outerWidth(true);
  py = $("#tbl" + this.id).position().top + $("#tbl" + this.id).outerHeight(true) / 2;
  _ref = this.pa.char;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ca = _ref[_i];
    v[ca.id] = {};
    v[ca.id].ctx = ctx;
    v[ca.id].x = $("#tbl" + ca.id).position().left + $("#tbl" + ca.id).outerWidth(true) / 2;
    v[ca.id].y = v[this.pa.id].sh + v[this.pa.id].h / ca.length * (this[ca.id] + 0.5) - 10;
    x = v[ca.id].x;
    y = v[ca.id].y;
    r = 10;
    ctx.beginPath();
    ctx.arc(x, y, r, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fillStyle = bocolor;
    ctx.fill();
    if (px > 0) {
      ctx.beginPath();
      ctx.moveTo(px, py);
      ctx.lineTo(v[ca.id].x, v[ca.id].y);
      ctx.strokeStyle = bocolor;
      ctx.lineWidth = 4;
      ctx.stroke();
    }
    px = v[ca.id].x;
    _results.push(py = v[ca.id].y);
  }
  return _results;
};

draw[OCEAN] = function(level) {
  return this.simpleIdeaTxt(level);
};

draw[CHAR] = function(level) {
  return this.simpleIdeaTxt(level);
};
