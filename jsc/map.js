// Generated by CoffeeScript 1.3.3

shape[NODE] = function(x, y, w, h) {
  var rad, s;
  rad = 5;
  return s = "M " + x + "," + y + "		m " + (-w / 2) + " " + (-h / 2 + rad) + " 		a " + rad + " " + rad + " 0 0 1  " + rad + " " + (-rad) + " h " + (w - 2 * rad) + "		a " + rad + " " + rad + " 0 0 1  " + rad + " " + rad + " v " + (h - 2 * rad) + " 		a " + rad + " " + rad + " 0 0 1  " + (-rad) + " " + rad + " h " + (-w + 2 * rad) + " 		a " + rad + " " + rad + " 0 0 1  " + (-rad) + " " + (-rad) + " v " + (-h + 2 * rad) + " z";
};

shape[GROUP] = function(x, y, w, h) {
  return "";
};

shape[HLANE] = function(x, y, w, h) {
  return "";
};

svg[MAP] = function(level) {
  var ia, _i, _j, _len, _len1, _ref, _ref1, _results;
  ppr[this.id] = Raphael("pap" + this.id, $("#map" + this.id).width(), $("#map" + this.id).height());
  if (!(this.frame != null)) {
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      switch (ia.kind) {
        case NODE:
        case HLANE:
        case GROUP:
          ia.mapxy(ppr[this.id], this.id);
      }
    }
  }
  if (!(this.frame != null)) {
    _ref1 = this.data;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      ia = _ref1[_j];
      switch (ia.kind) {
        case NODE:
        case HLANE:
        case GROUP:
          _results.push(ia.mapdraw());
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  }
};

Idea.prototype.mapxy = function(ppr, pprId) {
  var ia, _i, _len, _ref, _results;
  v[this.id] = {};
  v[this.id].ppr = ppr;
  v[this.id].pprId = pprId;
  v[this.id].ww = $("#bag" + this.id).outerWidth(true);
  v[this.id].hh = $("#bag" + this.id).outerHeight(true);
  v[this.id].w = $("#bag" + this.id).outerWidth(false);
  v[this.id].h = $("#bag" + this.id).outerHeight(false);
  v[this.id].x = $("#bag" + this.id).position().left + v[this.id].ww / 2;
  v[this.id].y = $("#bag" + this.id).position().top + v[this.id].hh / 2;
  if (!(this.frame != null)) {
    _ref = this.data;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      switch (ia.kind) {
        case NODE:
        case HLANE:
        case GROUP:
          _results.push(ia.mapxy(ppr, this.id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  }
};

Idea.prototype.mapdraw = function(ppr, pprId) {
  var as, i, ia, l1, l2, ll1, ll2, p1, p2, pp1, pp2, tlen1, tlen2, _i, _j, _k, _len, _len1, _ref, _ref1, _results;
  if (g[this.id] != null) {

  } else {
    g[this.id] = v[this.id].ppr.path(this.shape(v[this.id].x, v[this.id].y, v[this.id].w, v[this.id].h));
    g[this.id].attr({
      "stroke": "#888",
      "stroke-opacity": 0.5,
      "stroke-width": 1,
      "fill": "90-#FF9-#FFE",
      "fill-opacity": 1
    });
    g[this.id].data("id", this.id);
    g[this.id].click(ideaClick);
  }
  if (!(this.frame != null) && (this.axon != null) && this.axon.length > 0) {
    _ref = this.axon.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      tlen1 = g[this.id].getTotalLength();
      tlen2 = g[ia.id].getTotalLength();
      l1 = 10000;
      l2 = 10000;
      for (i = _j = 0; _j <= 7; i = ++_j) {
        p1 = g[this.id].getPointAtLength(tlen1 / 8 * i);
        p2 = g[ia.id].getPointAtLength(tlen2 / 8 * i);
        ll1 = Math.sqrt(Math.pow(p1.x - v[ia.id].x, 2) + Math.pow(p1.y - v[ia.id].y, 2));
        ll2 = Math.sqrt(Math.pow(v[this.id].x - p2.x, 2) + Math.pow(v[this.id].y - p2.y, 2));
        if (ll1 < l1) {
          pp1 = p1;
          l1 = ll1;
        }
        if (ll2 < l2) {
          pp2 = p2;
          l2 = ll2;
        }
      }
      as = "M " + v[this.id].x + " " + (v[this.id].y - v[this.id].h / 2) + " L " + v[ia.id].x + " " + (v[ia.id].y + v[ia.id].h / 2);
      g[this.id + "a" + ia.id] = v[this.id].ppr.path(as);
      g[this.id + "a" + ia.id].attr({
        "stroke-width": 4,
        "arrow-end": "classic",
        "stroke": "#888"
      });
    }
  }
  if (!(this.frame != null)) {
    _ref1 = this.data;
    _results = [];
    for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
      ia = _ref1[_k];
      switch (ia.kind) {
        case NODE:
        case HLANE:
        case GROUP:
          _results.push(ia.mapdraw(ppr, this.id));
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  }
};

draw[MAP] = function(level) {
  var ia, s, _i, _len, _ref;
  s = this.startIdeaTxt(level);
  if ((level === 0) || (level > 0 && !(this.frame != null))) {
    svga.push(this);
    s += "<div style='position:relative'>";
    s += "<div id='pap" + this.id + "'  style='position:absolute;top:0px;left:0px'>";
    s += "</div>";
    s += "<div id='map" + this.id + "'  class='mapbag' style='position:absolute;top:0px;left:0px'>";
    if (this.data.length > 0) {
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ia = _ref[_i];
        if (ia.kind === NODE) {
          s += ia.drawNode(level + 1);
        }
        if (ia.kind === HLANE) {
          s += ia.drawHLane(level + 1);
        }
        if (ia.kind === GROUP) {
          s += ia.drawGroup(level + 1);
        }
      }
    }
    s += "</div>";
    s += "</div>";
  }
  s += this.endIdeaTxt();
  return s;
};

Idea.prototype.drawHLane = function(level) {
  var ia, s, _i, _len, _ref;
  s = "";
  s += "<div id='bag" + this.id + "' class='";
  s += " hlanebag'>";
  s += "<div class='idea-txt" + level;
  s += " hlanetxt";
  s += "'>";
  if (this.frame) {
    if (this === fidea) {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25B3;</span>";
    } else {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25BD;</span>";
    }
  }
  s += "<span id='txt" + this.id + "'>";
  if (this.txt != null) {
    s += this.txt;
  }
  if (this.txt === "") {
    s += "&nbsp;";
  }
  s += "</span>";
  s += "</div>";
  s += "<div class='hlanechild'>";
  if (this.data.length > 0) {
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      if (ia.kind === NODE) {
        s += ia.drawNode(level + 1);
      } else if (ia.kind === HLANE) {
        s += ia.drawHLane(level + 1);
      } else if (ia.kind === GROUP) {
        s += ia.drawGroup(level + 1);
      }
    }
  }
  s += "</div>";
  s += "</div>";
  return s;
};

Idea.prototype.drawNode = function(level) {
  var ia, s, _i, _len, _ref;
  s = "";
  s += "<div id='bag" + this.id + "' class='";
  s += " nodebag'>";
  s += "<div class='idea-txt" + level;
  s += " nodetxt";
  s += "'>";
  if (this.frame) {
    if (this === fidea) {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25B3;</span>";
    } else {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25BD;</span>";
    }
  }
  s += "<span id='txt" + this.id + "'>";
  if (this.txt != null) {
    s += this.txt;
  }
  if (this.txt === "") {
    s += "&nbsp;";
  }
  s += "</span>";
  s += "</div>";
  if (this.data.length > 0) {
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      if (ia.kind === NODE) {
        s += ia.drawNode(level + 1);
      }
    }
  }
  s += "</div>";
  if (this.lastnode != null) {
    s += "<br/>";
  }
  return s;
};

Idea.prototype.drawGroup = function(level) {
  var ia, s, _i, _len, _ref;
  s = "";
  s += "<div id='bag" + this.id + "' class='";
  s += " groupbag'>";
  s += "<div class='idea-txt" + level;
  s += " grouptxt";
  s += "'>";
  if (this.frame) {
    if (this === fidea) {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25B3;</span>";
    } else {
      s += "<span id='frm" + this.id + "' class='frame'>&#x25BD;</span>";
    }
  }
  s += "<span id='txt" + this.id + "'>";
  if (this.txt != null) {
    s += this.txt;
  }
  if (this.txt === "") {
    s += "&nbsp;";
  }
  s += "</span>";
  s += "</div>";
  if (this.data.length > 0) {
    _ref = this.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      if (ia.kind === NODE) {
        s += ia.drawNode(level + 1);
      } else if (ia.kind === GROUP) {
        s += ia.drawGroup(level + 1);
      }
    }
  }
  s += "</div>";
  return s;
};

childkind[MAP] = function() {
  return HLANE;
};

childkind[HLANE] = function() {
  return NODE;
};

childkind[GROUP] = function() {
  return NODE;
};

childkind[NODE] = function() {
  return NODE;
};
