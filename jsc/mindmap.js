// Generated by CoffeeScript 1.3.3

canvastype[MINDMAP] = function() {
  return ACTIVE;
};

childkind[MINDMAP] = function() {
  return MINDLEAF;
};

childsd[MINDMAP] = function() {
  return OUTSIDE;
};

childkind[MINDLEAF] = function() {
  return MINDLEAF;
};

childsd[MINDLEAF] = function() {
  return OUTSIDE;
};

keyp[MINDMAP] = {};

keyp[MINDLEAF] = {};

Idea.prototype.kindMindmap = function() {
  this.kind = MINDMAP;
  return this.kindMindleaf();
};

Idea.prototype.kindMindleaf = function() {
  var ia, _i, _len, _ref, _results;
  if (this[OUTSIDE] != null) {
    _ref = this[OUTSIDE];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      ia.kind = MINDLEAF;
      _results.push(ia.kindMindleaf());
    }
    return _results;
  }
};

ssshape[MINDMAP] = function(x, y, w, h) {
  var frm;
  frm = this.forma != null ? this.forma : RRECT;
  return ssshape[frm].call(this, x, y, w, h);
};

ssshape[MINDLEAF] = ssshape[MINDMAP];

cvv[MINDMAP] = function(level) {
  var $cvv, ctx, mms;
  mms = this[OUTSIDE][0];
  mms.mmsethw(0);
  mms.mmsetlr();
  mms.mmsetxy();
  $cvv = $("#cvv" + this.id);
  $cvv.attr("width", v[mms.id].ww);
  $cvv.attr("height", v[mms.id].hh);
  ctx = $cvv[0].getContext("2d");
  return mms.mmdraw(ctx);
};

Idea.prototype.mmsethw = function(lvl) {
  var ia, _i, _len, _ref;
  v[this.id] = {};
  v[this.id].lvl = lvl;
  v[this.id].w = $("#bag" + this.id).outerWidth(true);
  v[this.id].h = $("#bag" + this.id).outerHeight(true);
  v[this.id].ww = v[this.id].w;
  v[this.id].hh = -DH;
  if (!(this.frame != null) && (this[OUTSIDE] != null)) {
    _ref = this[OUTSIDE];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ia = _ref[_i];
      if (ia.kind === MINDLEAF) {
        ia.mmsethw(lvl + 1);
        v[this.id].ww = Math.max(v[this.id].ww, v[this.id].w + DW + v[ia.id].ww);
        v[this.id].hh += v[ia.id].hh + DH;
      }
    }
  }
  return v[this.id].hh = Math.max(v[this.id].h, v[this.id].hh);
};

Idea.prototype.mmsetlr = function() {
  var flag, i, ia, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results;
  if (v[this.id].lvl === 0) {
    v[this.id].lr = CENTER;
    if (!(this.frame != null)) {
      v[this.id].hhr = 0;
      v[this.id].hhl = 0;
      flag = true;
      if (this[OUTSIDE] != null) {
        _ref = this[OUTSIDE];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          ia = _ref[i];
          if (ia.kind === MINDLEAF) {
            if (flag && (((v[this.id].hhr + v[ia.id].hh <= v[this.id].hh / 2) && !(i === this[OUTSIDE].length - 1)) || (i === 0 && this[OUTSIDE].length === 1))) {
              v[ia.id].lr = RIGHT;
              v[this.id].hhr += v[ia.id].hh;
            } else {
              flag = false;
              v[ia.id].lr = LEFT;
              v[this.id].hhl += v[ia.id].hh;
            }
          }
        }
        _ref1 = this[OUTSIDE];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          ia = _ref1[_j];
          if (ia.kind === MINDLEAF) {
            ia.mmsetlr();
          }
        }
      }
      v[this.id].hhr = 0;
      v[this.id].hhl = 0;
      if (this[OUTSIDE] != null) {
        _ref2 = this[OUTSIDE];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          ia = _ref2[_k];
          if (ia.kind === MINDLEAF) {
            if (v[ia.id].lr === RIGHT) {
              v[this.id].hhr += v[ia.id].hh + DH;
            } else {
              v[this.id].hhl += v[ia.id].hh + DH;
            }
          }
        }
      }
      if (v[this.id].hhr > 0) {
        v[this.id].hhr -= DH;
      }
      if (v[this.id].hhl > 0) {
        v[this.id].hhl -= DH;
      }
    }
    v[this.id].hh = Math.max(v[this.id].h, v[this.id].hhl, v[this.id].hhr) + DH;
    v[this.id].wwl = 0;
    v[this.id].wwr = 0;
    if (this[OUTSIDE] != null) {
      _ref3 = this[OUTSIDE];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        ia = _ref3[_l];
        if (ia.kind === MINDLEAF) {
          if (v[ia.id].lr === LEFT) {
            v[this.id].wwl = Math.max(v[this.id].wwl, v[ia.id].ww);
          }
          if (v[ia.id].lr === RIGHT) {
            v[this.id].wwr = Math.max(v[this.id].wwr, v[ia.id].ww);
          }
        }
      }
    }
    return v[this.id].ww = v[this.id].wwl + v[this.id].w + v[this.id].wwr + 3 * DW;
  } else {
    if (this[OUTSIDE] != null) {
      _ref4 = this[OUTSIDE];
      _results = [];
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        ia = _ref4[_m];
        if (ia.kind === MINDLEAF) {
          v[ia.id].lr = v[this.id].lr;
          _results.push(ia.mmsetlr());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  }
};

Idea.prototype.mmsetxy = function() {
  var ia, yy, yyl, yyr, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
  if (v[this.id].lvl === 0) {
    v[this.id].x = v[this.id].wwl + v[this.id].w / 2 + 3 / 2 * DW;
    v[this.id].y = v[this.id].hh / 2;
    if (!(this.frame != null)) {
      yyr = v[this.id].y - v[this.id].hhr / 2;
      yyl = v[this.id].y - v[this.id].hhl / 2;
      if (this[OUTSIDE] != null) {
        _ref = this[OUTSIDE];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ia = _ref[_i];
          if (ia.kind === MINDLEAF) {
            if (v[ia.id].lr === RIGHT) {
              v[ia.id].x = v[this.id].x + v[this.id].w / 2 + v[ia.id].w / 2 + DW;
              v[ia.id].y = yyr + v[ia.id].hh / 2;
              yyr += v[ia.id].hh + DH;
            } else {
              v[ia.id].x = v[this.id].x - v[this.id].w / 2 - v[ia.id].w / 2 - DW;
              v[ia.id].y = yyl + v[ia.id].hh / 2;
              yyl += v[ia.id].hh + DH;
            }
            _results.push(ia.mmsetxy());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    }
  } else {
    yy = v[this.id].y - v[this.id].hh / 2;
    if (this[OUTSIDE] != null) {
      _ref1 = this[OUTSIDE];
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ia = _ref1[_j];
        if (ia.kind === MINDLEAF) {
          if (v[this.id].lr === RIGHT) {
            v[ia.id].x = v[this.id].x + v[this.id].w / 2 + v[ia.id].w / 2 + DW;
          } else {
            v[ia.id].x = v[this.id].x - v[this.id].w / 2 - v[ia.id].w / 2 - DW;
          }
          v[ia.id].y = yy + v[ia.id].hh / 2;
          yy += v[ia.id].hh + DH;
          _results1.push(ia.mmsetxy());
        } else {
          _results1.push(void 0);
        }
      }
      return _results1;
    }
  }
};

Idea.prototype.mmdraw = function(ctx) {
  var as, i, ia, lx, ly, rx, ry, sch, _i, _len, _ref, _results;
  v[this.id].ctx = ctx;
  v[this.id].scheme = this.scheme != null ? this.scheme : WHITE;
  this.ssshape(v[this.id].x, v[this.id].y, v[this.id].w, v[this.id].h);
  $("#bag" + this.id).css("position", "absolute");
  $("#bag" + this.id).css("top", v[this.id].y - v[this.id].h / 2);
  $("#bag" + this.id).css("left", v[this.id].x - v[this.id].w / 2);
  sch = v[this.id].scheme;
  if (v[this.id].lvl > 0) {
    if (v[this.id].lr === RIGHT) {
      rx = v[this.pa.id].x + v[this.pa.id].w / 2;
      ry = v[this.pa.id].y;
      lx = v[this.id].x - v[this.id].w / 2;
      ly = v[this.id].y;
      ctx.beginPath();
      ctx.moveTo(rx, ry - 3);
      ctx.bezierCurveTo((lx + rx) / 2, ry - 3, (lx + rx) / 2, ly, lx, ly);
      ctx.bezierCurveTo((lx + rx) / 2, ly, (lx + rx) / 2, ry + 3, rx, ry + 3);
      ctx.closePath();
      ctx.fillStyle = sch[1];
      ctx.strokeStyle = sch[3];
      ctx.lineWidth = 1;
      ctx.fill();
      ctx.stroke();
    } else {
      rx = v[this.pa.id].x - v[this.pa.id].w / 2;
      ry = v[this.pa.id].y;
      lx = v[this.id].x + v[this.id].w / 2;
      ly = v[this.id].y;
      as = "M " + rx + "," + (ry - 3) + " 			C " + ((lx + rx) / 2) + "," + (ry - 3) + " " + ((lx + rx) / 2) + "," + ly + " " + lx + "," + ly + "			C " + ((lx + rx) / 2) + "," + ly + " " + ((lx + rx) / 2) + "," + (ry + 3) + " " + rx + "," + (ry + 3) + " 			z";
      ctx.beginPath();
      ctx.moveTo(rx, ry - 3);
      ctx.bezierCurveTo((lx + rx) / 2, ry - 3, (lx + rx) / 2, ly, lx, ly);
      ctx.bezierCurveTo((lx + rx) / 2, ly, (lx + rx) / 2, ry + 3, rx, ry + 3);
      ctx.closePath();
      ctx.fillStyle = sch[1];
      ctx.strokeStyle = sch[3];
      ctx.lineWidth = 1;
      ctx.fill();
      ctx.stroke();
    }
  }
  if (this[OUTSIDE] != null) {
    _ref = this[OUTSIDE];
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      ia = _ref[i];
      if (ia.kind === MINDLEAF) {
        _results.push(ia.mmdraw(ctx));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

Idea.prototype.htmlMindleaf = function(level) {
  /*
  	s = ""
  	s += "<div id='bag"+@id+"' class='"
  	s += " mindbag'>"
  	s += "<div class='idea-txt"+level
  	s += " mindleaf"
  	s += "'>"
  	if @frame 
  		if @ is fidea then s += "<span id='frm"+@id+"' class='frame'>&#x25B3;</span>"
  		else s += "<span id='frm"+@id+"' class='frame'>&#x25BD;</span>"
  	s += "<span id='txt"+@id+"'>"
  	s += @txt if @txt?
  	s += "&nbsp;" if @txt is ""
  	s += "</span>"
  	s += "</div>" 
  	s += "</div>" # Важно - дивы не вкладываются, чтобы было можно их свободно перемещать и позиционировать
  */

  var s;
  s = this.simpleIdeaTxt(level);
  return s;
};

keyp[MINDMAP][KEY_DOWN] = function(eo) {
  var _ref;
  if (((_ref = this[OUTSIDE]) != null ? _ref[0] : void 0) != null) {
    return this[OUTSIDE][0].select();
  } else {
    return keyp[DEFAULT][KEY_DOWN].call(this, arguments);
  }
};

keyp[MINDLEAF][KEY_DOWN] = function(eo) {
  var _ref, _ref1, _ref2, _ref3, _ref4;
  if (((_ref = this[0]) != null ? _ref[0] : void 0) != null) {
    return this[0][0].select();
  }
  if ((v[this.id] != null) && v[this.id].lr === CENTER) {
    return this.pa.downnext().select();
  }
  if (this.pa != null) {
    if (this.ix < this.pa[OUTSIDE].length - 1) {
      return this.pa[OUTSIDE][this.ix + 1].select();
    } else if (((_ref1 = this.pa.pa[OUTSIDE]) != null ? (_ref2 = _ref1[this.pa.ix + 1]) != null ? (_ref3 = _ref2[OUTSIDE]) != null ? _ref3[0] : void 0 : void 0 : void 0) != null) {
      return this.pa.pa[OUTSIDE][this.pa.ix + 1][OUTSIDE][0].select();
    } else if (((_ref4 = this.pa.pa[OUTSIDE]) != null ? _ref4[this.pa.ix + 1] : void 0) != null) {
      return this.pa.pa[OUTSIDE][this.pa.ix + 1].select();
    } else {
      return this.pa.downnext().select();
    }
  }
  return this;
};

downnext[MINDLEAF] = function() {
  if (this === fidea) {
    return null;
  }
  if (this.pa != null) {
    if (this.ix < this.pa[OUTSIDE].length - 1) {
      return this.pa[OUTSIDE][this.ix + 1];
    } else {
      return this.pa.downnext();
    }
  }
  return this;
};

keyp[MINDLEAF][KEY_UP] = function(eo) {
  var _ref, _ref1, _ref2;
  if (this.lvl === 0) {
    return this.pa.select();
  } else if (this.pa[OUTSIDE][this.ix - 1] != null) {
    return this.pa[OUTSIDE][this.ix - 1].select();
  }
  if ((v[this.id] != null) && v[this.id].lr === CENTER) {
    return this.pa.select();
  }
  if (this.pa != null) {
    if (this.ix > 0) {
      return this.pa[OUTSIDE][this.ix - 1].select();
    } else {
      if (((_ref = this.pa.pa[OUTSIDE]) != null ? (_ref1 = _ref[this.pa.ix - 1]) != null ? (_ref2 = _ref1[OUTSIDE]) != null ? _ref2[this.pa.pa[this.pa.ix - 1].length - 1] : void 0 : void 0 : void 0) != null) {
        return this.pa.pa[OUTSIDE][this.pa.ix - 1][OUTSIDE][this.pa.pa[this.pa.ix - 1].length - 1].select();
      } else if (this.pa.pa[OUTSIDE][this.pa.ix - 1] != null) {
        return this.pa.pa[OUTSIDE][this.pa.ix - 1].select();
      } else {
        return this.pa.select();
      }
    }
  }
  return this;
};

keyp[MINDLEAF][KEY_LEFT] = function(eo) {
  var i, _i, _ref;
  if (v[this.id] != null) {
    if (v[this.id].lr === LEFT) {
      if ((this[OUTSIDE] != null) && this[OUTSIDE].length > 0) {
        return this[OUTSIDE][0].select();
      } else {
        this.pa.leftnext().select();
      }
    } else if (v[this.id].lr === RIGHT) {
      return this.pa.select();
    } else if (v[this.id].lr === CENTER) {
      for (i = _i = 0, _ref = this[OUTSIDE].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (v[this[OUTSIDE][i].id].lr === LEFT) {
          return this[OUTSIDE][i].select();
        }
      }
    }
  }
  return this;
};

keyp[MINDLEAF][KEY_RIGHT] = function(eo) {
  if (v[this.id] != null) {
    if (v[this.id].lr === RIGHT || v[this.id].lr === CENTER) {
      if ((this[OUTSIDE] != null) && this[OUTSIDE].length > 0) {
        return this[OUTSIDE][0].select();
      } else {
        this.pa.rightnext().select();
      }
    } else if (v[this.id].lr === LEFT) {
      return this.pa.select();
    }
  }
  return this;
};

keyp[MINDLEAF][KEY_ENTER] = function() {
  var ia;
  if (this.frame != null) {
    if (this === fidea) {
      return this.upperFrame().fhtml(this);
    } else {
      return this.fhtml();
    }
  } else if ((v[this.id] != null) && v[this.id].lr === CENTER) {
    ia = this.add(OUTSIDE, "&nbsp;", {
      kind: MINDLEAF
    });
    return fidea.fhtml(ia);
  } else {
    ia = this.pa.add(OUTSIDE, "&nbsp;", {
      kind: MINDLEAF
    });
    return fidea.fhtml(ia);
  }
};

keyp[MINDLEAF][ALT + KEY_LEFT] = function() {};

keyp[MINDLEAF][ALT + KEY_RIGHT] = function() {};

keyp[MINDLEAF][ALT + KEY_UP] = function() {
  var ia, ix, pa, sd;
  if (this !== fidea) {
    if (this.pa[this.sd][this.ix - 1] != null) {
      ia = this;
      sd = this.sd;
      pa = this.pa;
      ix = this.ix;
      pa[sd].splice(ix, 1);
      pa[sd].splice(ix - 1, 0, ia);
      pa.normalizeIdea();
      return redraw(ia);
    }
  }
};

keyp[DEFAULT][ALT + KEY_DOWN] = function() {
  var ia, ix, pa, sd;
  if (this !== fidea) {
    if (this.pa[this.sd][this.ix + 1] != null) {
      ia = this;
      sd = this.sd;
      pa = this.pa;
      ix = this.ix;
      pa[sd].splice(ix, 1);
      pa[sd].splice(ix + 1, 0, ia);
      pa.normalizeIdea();
      return redraw(ia);
    }
  }
};

/*
down[MINDLEAF] = ->
*/


/*
ctrlenter[MINDLEAF] = ->
	if v[@id]? and v[@id].lr is CENTER
		if @pa?.pa?
			return @pa.pa.addIdea(null,@pa.ix+1,@pa.ix+1,true)
	if @pa?
		sidea.pa.addIdea(sidea,sidea.ix+1,sidea.ix+1,true)



up[MINDLEAF] = ->



right[MINDLEAF] = ->
*/


/*
navi[MINDMAP] = (eo) ->
	if $txt.attr("contentEditable") is "true" then return navi[IDEA](eo)
	switch eo.which
		when 40 # Down
			if (sidea is fidea)
				if sidea[0]? then sidea[0].select()
			else
				if (not sidea.frame) and sidea[0]? then sidea[0].select()
				else
					sia = sidea 
					while sia isnt fidea and not (sia.pa[sia.ix+1]?)
						sia = sia.pa
					if sia isnt fidea then sia.pa[sia.ix+1].select()
		else navi[IDEA](eo)
*/

