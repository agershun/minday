// Generated by CoffeeScript 1.3.3

canvastype[PYRAMID] = function() {
  return ACTIVE;
};

keyp[PYRAMID] = {};

keyp[LAYER] = {};

childkind[PYRAMID] = function() {
  return LAYER;
};

childkind[LAYER] = function() {
  return IDEA;
};

Idea.prototype.kindPyramid = function() {
  var ia, _i, _len, _ref, _results;
  this.kind = PYRAMID;
  _ref = this.data;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    _results.push(ia.kind = LAYER);
  }
  return _results;
};

cvv[PYRAMID] = function() {
  var $cvv, ia, maxh, _i, _j, _len, _len1, _ref, _ref1, _results;
  v[this.id] = {};
  maxh = 0;
  _ref = this.data;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    v[ia.id] = {};
    v[ia.id].w = $("#bag" + ia.id).outerWidth(true);
    v[ia.id].h = $("#bag" + ia.id).outerHeight(true);
    maxh = Math.max(maxh, v[ia.id].h);
  }
  v[this.id].h = maxh * (this.length + 2);
  v[this.id].w = v[this.id].h * Math.SQRT2;
  v[this.id].x = v[this.id].w / 2;
  v[this.id].y = v[this.id].h / 2;
  $cvv = $("#cvv" + this.id);
  $cvv.attr("height", v[this.id].h);
  $cvv.attr("width", v[this.id].w);
  v[this.id].ctx = $cvv[0].getContext("2d");
  _ref1 = this.data;
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    ia = _ref1[_j];
    v[ia.id].ctx = v[this.id].ctx;
    v[ia.id].scheme = [WHITE, BLUE, LIGHTBLUE, GREEN, YELLOW, RED, BLACK][ia.ix % this.length];
    ia.ssshape(v[this.id].x, v[this.id].y, v[this.id].w, v[this.id].h);
    $("#bag" + ia.id).css("position", "absolute");
    $("#bag" + ia.id).css("left", v[this.id].x - v[ia.id].w / 2);
    _results.push($("#bag" + ia.id).css("top", v[this.id].y - v[this.id].h / 2 + v[this.id].h / (this.length + 2) * (ia.ix + 1.5) - v[ia.id].h / 2));
  }
  return _results;
};

ssshape[LAYER] = function(x, y, w, h) {
  var ctx;
  ctx = v[this.id].ctx;
  if (this.ix === 0) {
    ctx.beginPath();
    ctx.moveTo(x, y - h / 2);
    ctx.lineTo(x - w / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * 2);
    ctx.lineTo(x + w / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * 2);
    ctx.closePath();
  } else {
    ctx.beginPath();
    ctx.moveTo(x - w / 2 * (this.ix + 1) / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * (this.ix + 1));
    ctx.lineTo(x + w / 2 * (this.ix + 1) / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * (this.ix + 1));
    ctx.lineTo(x + w / 2 * (this.ix + 2) / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * (this.ix + 2));
    ctx.lineTo(x - w / 2 * (this.ix + 2) / (this.pa.length + 2), y - h / 2 + h / (this.pa.length + 2) * (this.ix + 2));
    ctx.closePath();
  }
  return this.strokefill(x, y, w, h);
};
