// Generated by CoffeeScript 1.3.3
var stdFill;

canvastype[ISHIKAWA] = function() {
  return ACTIVE;
};

keyp[ISHIKAWA] = {};

keyp[BONE] = {};

childkind[ISHIKAWA] = function() {
  return BONE;
};

childkind[BONE] = function() {
  return BONE;
};

Idea.prototype.kindIshikawa = function() {
  var i, ia, _i, _len, _ref, _results;
  this.kind = ISHIKAWA;
  _ref = this.data;
  _results = [];
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    ia = _ref[i];
    ia.pa = this;
    ia.ix = i;
    ia.kind = BONE;
    _results.push(ia.kindBone());
  }
  return _results;
};

Idea.prototype.kindBone = function() {
  var i, ia, _i, _len, _ref, _results;
  if (this.length > 0) {
    _ref = this.data;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      ia = _ref[i];
      if (ia.kind === BONE) {
        ia.pa = this;
        ia.ix = i;
        _results.push(ia.kind = BONE);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
};

shape[BONE] = function(x, y, w, h) {
  return shape[RRECT].call(this, x, y, w, h);
};

stdFill = function(fig) {
  return fig.attr({
    "stroke": "#888",
    "stroke-opacity": 0.5,
    "stroke-width": 1,
    "fill": "90-#FF9-#FFE",
    "fill-opacity": 1
  });
};

paint[ISHIKAWA] = function(level, ppr) {
  v[this.id] = {};
  v[this.id].ppr = ppr;
  v[this.id].w = 400;
  v[this.id].h = 400;
  ppr.setSize(v[this.id].w, v[this.id].h);
  return this[0].paintMainBone(ppr);
};

Idea.prototype.paintMainBone = function(ppr) {
  var as, ia, _i, _len, _ref, _results;
  $("#bag" + this.id).addClass("mindbag");
  v[this.id] = {};
  v[this.id].w = $("#bag" + this.id).outerWidth(true);
  v[this.id].h = $("#bag" + this.id).outerHeight(true);
  v[this.id].x = v[this.id].w / 2;
  v[this.id].y = v[this.pa.id].h / 2;
  g[this.id] = ppr.path(this.shape(v[this.id].x, v[this.id].y, v[this.id].w, v[this.id].h));
  stdFill(g[this.id]);
  $("#bag" + this.id).css("position", "absolute");
  $("#bag" + this.id).css("left", v[this.id].x - v[this.id].w / 2);
  $("#bag" + this.id).css("top", v[this.id].y - v[this.id].h / 2);
  as = "M " + v[this.id].w + " " + v[this.id].y + "				H " + v[this.pa.id].w;
  g[this.id + "b"] = ppr.path(as);
  stdFill(g[this.id + "b"]);
  _ref = this.data;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    _results.push(ia.paintEvenBone(1, ppr));
  }
  return _results;
};

Idea.prototype.paintEvenBone = function(lvl, ppr) {
  var as, ia, x1, x2, y1, y2, _i, _len, _ref, _results;
  $("#bag" + this.id).addClass("mindbag");
  v[this.id] = {};
  v[this.id].w = $("#bag" + this.id).outerWidth(true);
  v[this.id].h = $("#bag" + this.id).outerHeight(true);
  v[this.id].x = v[this.pa.id].x + v[this.pa.id].w / 2 + 50 * this.ix + 50;
  v[this.id].y = v[this.pa.id].y + 100 * (this.ix % 2) - 50;
  if (this.ix % 2 === 0) {
    $("#bag" + this.id).css("-webkit-transform", "rotate(-45deg)");
  } else {
    $("#bag" + this.id).css("-webkit-transform", "rotate(+45deg)");
  }
  $("#bag" + this.id).css("position", "absolute");
  $("#bag" + this.id).css("left", v[this.id].x - v[this.id].w / 2);
  $("#bag" + this.id).css("top", v[this.id].y - v[this.id].h / 2);
  x1 = v[this.pa.id].x + v[this.pa.id].w / 2 + 50 * this.ix + 50;
  x2 = x1 + 100;
  y1 = v[this.pa.id].y;
  y2 = y1 + 200 * (this.ix % 2) - 100;
  as = "M " + x1 + " " + y1 + "				L " + x2 + " " + y2;
  g[this.id + "b"] = ppr.path(as);
  stdFill(g[this.id + "b"]);
  _ref = this.data;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    _results.push(ia.paintOddBone(lvl + 1, ppr));
  }
  return _results;
};

Idea.prototype.paintOddBone = function(lvl, ppr) {
  var ia, _i, _len, _ref, _results;
  _ref = this.data;
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    _results.push(ia.paintOddBone(lvl + 1, ppr));
  }
  return _results;
};

Idea.prototype.simpleIdeaTxtChildren = function(level) {
  var ia, s, _i, _len, _ref;
  s = this.simpleIdeaTxt(level);
  _ref = this.data;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    s += ia.draw(level + 1);
  }
  return s;
};

draw[ISHIKAWA] = function(level) {
  var ia, s, _i, _len, _ref;
  s = this.startIdeaTxt(level);
  _ref = this.data;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ia = _ref[_i];
    s += ia.draw(level + 1);
  }
  s += this.endIdeaTxt(level);
  return s;
};

draw[BONE] = function(level) {
  return this.simpleIdeaTxtChildren(level);
};
