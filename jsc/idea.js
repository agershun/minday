// Generated by CoffeeScript 1.3.3
var Idea, add, adf, adr, createNewModel, currentModel, deleteIdea, find, findall, findref, idea, initIdea, isAd, isArray, isId, isIdea, isString, label, models, newIdea, readonly, refs, selectModel, updateModel;

idea = [];

label = [];

refs = [];

models = {};

currentModel = "minday";

readonly = false;

createNewModel = function(modelName) {
  var model;
  if (modelName == null) {
    modelName = "minday";
  }
  model = {};
  currentModel = modelName;
  model.name = modelName;
  model.idea = [];
  model.label = [];
  model.refs = [];
  model.sidea = 0;
  model.fidea = 0;
  model.length = 0;
  model.readonly = false;
  models[modelName] = model;
  return model;
};

selectModel = function(modelName, refresh) {
  var fidea, sidea;
  if (modelName == null) {
    modelName = "minday";
  }
  if (refresh == null) {
    refresh = false;
  }
  if (models[modelName] != null) {
    currentModel = modelName;
    idea = models[modelName].idea;
    label = models[modelName].label;
    refs = models[modelName].refs;
    sidea = models[modelName].sidea;
    fidea = models[modelName].fidea;
    readonly = models[modelName].readonly;
    if (refresh) {
      return fidea.fhtml(sidea);
    }
  }
};

updateModel = function(modelName, fid, sid, ro) {
  if (modelName == null) {
    modelName = "minday";
  }
  if (fid == null) {
    fid = idea[0];
  }
  if (sid == null) {
    sid = idea[0];
  }
  if (ro == null) {
    ro = false;
  }
  if (models[modelName] != null) {
    models[modelName].idea = idea;
    models[modelName].label = label;
    models[modelName].refs = refs;
    models[modelName].fidea = fid;
    models[modelName].sidea = sid;
    models[modelName].length = idea.length;
    return models[modelName].readonly = ro;
  }
};

newIdea = function() {
  var ia;
  ia = new Idea();
  ia.id = -idea.length;
  idea.push(ia);
  return ia;
};

deleteIdea = function() {
  return idea.splice(0, idea.length);
};

initIdea = function(len) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = len - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push(newIdea());
  }
  return _results;
};

Idea = (function() {

  function Idea() {
    this.length = 0;
    this.kind = IDEA;
  }

  return Idea;

})();

adf = function() {
  var ia;
  ia = add.apply(this, arguments);
  ia.frame = true;
  return ia;
};

add = function() {
  var arg, arg1, i, ia, key, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
  ia = newIdea();
  switch (arguments.length) {
    case 1:
      if (isString(arguments[0])) {
        ia.txt = arguments[0];
      } else if (isArray(arguments[0])) {
        _ref = arguments[0];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          arg = _ref[i];
          arg1 = arg;
          if (arg1 != null) {
            if (isString(arg)) {
              arg1 = add(arg);
            }
            arg1.ix = i;
            arg1.pa = ia;
          }
          ia[i] = arg1;
        }
        ia.length = arguments[0].length;
      }
      break;
    case 2:
      if (isString(arguments[0]) && isArray(arguments[1])) {
        ia.txt = arguments[0];
        _ref1 = arguments[1];
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          arg = _ref1[i];
          arg1 = arg;
          if (arg1 != null) {
            if (isString(arg)) {
              arg1 = add(arg);
            }
            arg1.ix = i;
            arg1.pa = ia;
          }
          ia[i] = arg1;
        }
        ia.length = arguments[1].length;
      } else {
        ia.txt = arguments[0];
        _ref2 = arguments[1];
        for (key in _ref2) {
          val = _ref2[key];
          if (key === "label") {
            label[val] = ia;
          }
          ia[key] = val;
        }
      }
      break;
    case 3:
      ia.txt = arguments[0];
      _ref3 = arguments[1];
      for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
        arg = _ref3[i];
        arg1 = arg;
        if (arg1 != null) {
          if (isString(arg)) {
            arg1 = add(arg);
          }
          arg1.ix = i;
          arg1.pa = ia;
        }
        ia[i] = arg1;
      }
      ia.length = arguments[1].length;
      _ref4 = arguments[2];
      for (key in _ref4) {
        val = _ref4[key];
        if (key === "label") {
          label[val] = ia;
        }
        arg1 = val;
        if (arg1 != null) {
          if (isString(arg)) {
            arg1 = add(arg);
          }
          arg1.ix = key;
          arg1.pa = ia;
        }
        ia[key] = val;
      }
  }
  return ia;
};

adr = function() {
  var arg, i, ia, _i, _len, _ref;
  ia = newIdea();
  ia.kind = LINK;
  switch (arguments.length) {
    case 1:
      if (isArray(arguments[0])) {
        _ref = arguments[0];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          arg = _ref[i];
          ia[i] = arg;
        }
        ia.length = arguments[0].length;
      }
  }
  return ia;
};

Object.defineProperty(Idea.prototype, "clone", {
  enumerable: false,
  get: function() {
    var bi;
    bi = newIdea();
    bi.txt = this.txt;
    if (this.ref != null) {
      bi.ref = this.ref;
      refs[this.ref].push(bi);
    } else {
      this.ref = refs.length;
      bi.ref = this.ref;
      refs.push([this, bi]);
    }
    return bi;
  }
});

Idea.prototype.push = function() {
  var a, _i, _len;
  for (_i = 0, _len = arguments.length; _i < _len; _i++) {
    a = arguments[_i];
    if (a === null) {
      a = add("");
    }
    if (isString(a)) {
      a = add(a);
    } else if (isIdea(a) && (a.pa != null)) {
      a = a.clone;
    }
    this[this.length] = a;
    a.ix = this.length;
    a.pa = this;
    this.length++;
  }
  return this[this.length - 1];
};

Idea.prototype.set = function(par) {
  $.extend(this, par);
  return this;
};

find = function(a) {
  var ia, _i, _len;
  for (_i = 0, _len = idea.length; _i < _len; _i++) {
    ia = idea[_i];
    if (ia.txt === a) {
      return ia;
    }
  }
  return null;
};

findall = function(a) {
  var ia, ret, _i, _len;
  ret = [];
  for (_i = 0, _len = idea.length; _i < _len; _i++) {
    ia = idea[_i];
    if (ia.txt === a) {
      ret.push(ia);
    }
  }
  return ret;
};

findref = function(a) {
  var ret;
  ret = [];
  if (a.ref != null) {
    ret = refs[a.ref];
  }
  return ret;
};

isArray = function(a) {
  return Object.prototype.toString.call(a) === '[object Array]';
};

isIdea = function(a) {
  return a instanceof Idea;
};

isId = function(a) {
  return (!isNaN(a)) && a[0] === "-";
};

isAd = function(a) {
  return (!isNaN(a)) && a[0] !== "-";
};

isString = function(a) {
  return typeof a === "string";
};

Object.defineProperty(Idea.prototype, "data", {
  get: function() {
    var i, ret, _i, _ref;
    ret = [];
    if (this.length > 0) {
      for (i = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        ret.push(this[i]);
      }
    }
    return ret;
  }
});

Idea.prototype.dta = function(side) {
  var i, ia, ret, sd, _i, _ref;
  if (side == null) {
    side = INSIDE;
  }
  ret = [];
  if (this.length > 0) {
    for (i = _i = 0, _ref = this.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      ia = this[i];
      sd = ia.side != null ? ia.side : INSIDE;
      if (sd === side) {
        ret.push(ia);
      }
    }
  }
  return ret;
};

Object.defineProperty(Idea.prototype, "prop", {
  get: function() {
    var k, res, v;
    res = {};
    for (k in this) {
      v = this[k];
      if (this.hasOwnProperty(k) && isId(k)) {
        res[k] = v;
      }
    }
    return res;
  }
});

Object.filter = function(obj, predicate) {
  var key, res;
  res = {};
  for (key in obj) {
    if (obj.hasOwnProperty(key) && !predicate(obj[key])) {
      res[key] = obj[key];
    }
  }
  return res;
};

Idea.prototype.has = function() {
  var a, _i, _j, _len, _len1, _ref, _ref1;
  switch (arguments.length) {
    case 1:
      this["arguments"][0] = true;
      break;
    case 2:
      if (this[arguments[0].id] == null) {
        this[arguments[0].id] = arguments[1];
      } else if (isArray(this[arguments[0].id])) {
        _ref = this[arguments[0].id];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          this.push(a);
        }
      } else {
        this[arguments[0].id] = [this[arguments[0].id]];
        _ref1 = this[arguments[0].id];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          a = _ref1[_j];
          this.push(a);
        }
      }
  }
  return this;
};

Idea.prototype.indexOf = function(a, fromIndex) {
  var i, pos;
  if (fromIndex == null) {
    fromIndex = 0;
  }
  i = fromIndex;
  pos = -1;
  while (i < this.length) {
    if (this[i] === a) {
      pos = i;
      break;
    }
    i++;
  }
  return pos;
};

Idea.prototype.set = function() {
  switch (arguments.length) {
    case 1:
      if (this.indexOf(arguments[0]) < 0) {
        this.push(arguments[0]);
      }
      break;
    case 2:
      this[arguments[0].id] = arguments[1];
  }
  return this;
};

Idea.prototype.clear = function() {
  var pos;
  pos = this.indexOf(arguments[0]);
  if (pos >= 0) {
    this.remove(pos);
  }
  if (this[arguments[0].id] != null) {
    delete this[arguments[0].id];
  }
  return this;
};

Idea.prototype.remove = function(pos) {
  var i, _i, _ref;
  delete this[i];
  if (pos < this.length - 1) {
    for (i = _i = pos, _ref = this.length - 2; pos <= _ref ? _i <= _ref : _i >= _ref; i = pos <= _ref ? ++_i : --_i) {
      this[i] = this[i + 1];
      this[i].ix = i;
    }
  }
  delete this[this.length - 1];
  this.length--;
  return this;
};

Idea.prototype.splice = function(start, deleteCount) {
  var addCount, aix, delArray, ix, newlength, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
  delArray = [];
  if (deleteCount < 0) {
    deleteCount = 0;
  }
  if (deleteCount > 0) {
    for (ix = _i = start, _ref = start + deleteCount - 1; start <= _ref ? _i <= _ref : _i >= _ref; ix = start <= _ref ? ++_i : --_i) {
      delArray.push(this[ix]);
      delete this[ix];
    }
    if (start <= this.length - 1 - deleteCount) {
      for (ix = _j = start, _ref1 = this.length - 1 - deleteCount; start <= _ref1 ? _j <= _ref1 : _j >= _ref1; ix = start <= _ref1 ? ++_j : --_j) {
        this[ix] = this[ix + deleteCount];
      }
    }
    this.length -= deleteCount;
  }
  addCount = arguments.length - 2;
  if (addCount > 0) {
    newlength = this.length + addCount;
    for (ix = _k = _ref2 = this.length - 1; _k >= start; ix = _k += -1) {
      this[ix + addCount] = this[ix];
    }
    for (aix = _l = 0, _ref3 = addCount - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; aix = 0 <= _ref3 ? ++_l : --_l) {
      this[start + aix] = arguments[2 + aix];
    }
    this.length = newlength;
  }
  return delArray;
};

Idea.prototype.adr = function(ia, par) {
  var ret;
  ret = ia;
  if (arguments.length === 0) {
    ret = this.add(null);
  } else if (arguments.length === 1) {
    if ((typeof ia === "string") || (ia === null) || isIdea(ia)) {
      if (this.length > 0) {
        ret = this.add(this.length - 1, ia);
      } else {
        ret = this.add(ia);
      }
    } else if (typeof ia === "object") {
      if (this.length > 0) {
        ret = this.add(this.length - 1, null, ia);
      } else {
        ret = this.add(null, ia);
      }
    }
  } else if (arguments.length === 2) {
    ret = this.add(this.length - 1, ia, par);
  }
  return ret;
};

Idea.prototype.adf = function(side, ia, par) {
  if (par == null) {
    par = {};
  }
  ia = this.add(side, ia, par);
  ia.frame = true;
  return ia;
};

Idea.prototype.ado = function(ia, par) {
  ia = this.add(OUTSIDE, ia, par);
  return ia;
};

Idea.prototype.add = function(side, ia, par) {
  var i, _i, _ref;
  if (par == null) {
    par = {};
  }
  if (arguments.length === 0) {
    side = this.length;
    ia = null;
  } else if (arguments.length === 1) {
    if ((typeof side === "object") && !(side instanceof Idea)) {
      par = side;
      side = this.length;
      ia = null;
    } else if ((typeof side === "string") || ((typeof side === "object") && (side instanceof Idea))) {
      ia = side;
      side = this.length;
    }
  } else if (arguments.length === 2) {
    if (((typeof side === "string") || (side === null)) && ((typeof ia === "object") && !(ia instanceof Idea))) {
      par = ia;
      ia = side;
      side = this.length;
    } else if ((typeof side === "number") && (typeof ia === "object") && !(ia instanceof Idea)) {
      par = ia;
      ia = null;
    }
  } else if (arguments.length > 3) {
    console.log("Idea::add(side,ia): Число аргументов должно быть 1, 2 или 3");
    return this;
  }
  if ((typeof ia === "string") || (ia === null)) {
    ia = add(ia);
  }
  if (this[side] == null) {
    this[side] = [];
  }
  if (!isNaN(side) && side >= 0) {
    if (side >= this.length) {
      for (i = _i = _ref = this.length; _ref <= side ? _i <= side : _i >= side; i = _ref <= side ? ++_i : --_i) {
        this[i] = [];
      }
      this.length = side + 1;
    }
  }
  ia.ix = this[side].length;
  ia.pa = this;
  ia.sd = side;
  this[side].push(ia);
  $.extend(ia, par);
  return ia;
};
